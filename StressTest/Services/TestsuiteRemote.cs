// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testsuite_remote.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Remote {

  /// <summary>Holder for reflection information generated from testsuite_remote.proto</summary>
  public static partial class TestsuiteRemoteReflection {

    #region Descriptor
    /// <summary>File descriptor for testsuite_remote.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestsuiteRemoteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZ0ZXN0c3VpdGVfcmVtb3RlLnByb3RvEgZyZW1vdGUiOQoDTG9nEiEKB0xv",
            "Z1R5cGUYASABKA4yEC5yZW1vdGUuTE9HX1RZUEUSDwoHQ29udGVudBgCIAEo",
            "CSIFCgNOaWwiYAoNQ2FwdHVyZVBhcmFtcxISCgpGdWxsU2NyZWVuGAEgASgI",
            "EgkKAXgYAiABKAUSCQoBeRgDIAEoBRIJCgF3GAQgASgFEgkKAWgYBSABKAUS",
            "DwoHUXVhbGl0eRgGIAEoBSInCgpDbWRSZXF1ZXN0EgsKA0NtZBgBIAEoCRIM",
            "CgRBcmdzGAIgAygJImQKEU1vdXNlQ2xpY2tSZXF1ZXN0EgkKAXgYASABKAUS",
            "CQoBeRgCIAEoBRITCgtEb3VibGVDbGljaxgDIAEoCBIkCgZCdXR0b24YBCAB",
            "KA4yFC5yZW1vdGUuTW91c2VCdXR0b25zIkMKEE1vdXNlTW92ZVJlcXVlc3QS",
            "CQoBeBgBIAEoBRIJCgF5GAIgASgFEgsKA0xvdxgDIAEoAhIMCgRIaWdoGAQg",
            "ASgCIi8KDUtleVRhcFJlcXVlc3QSDwoHS2V5Q29kZRgBIAMoCRINCgVEZWxh",
            "eRgCIAEoAiI4ChFLZXlMaXN0VGFwUmVxdWVzdBIjCgRLZXlzGAEgAygLMhUu",
            "cmVtb3RlLktleVRhcFJlcXVlc3QiJQoITG9nUmVwbHkSGQoETG9ncxgBIAMo",
            "CzILLnJlbW90ZS5Mb2ciLAoJSW1hZ2VEYXRhEhEKCVRpbWVTdGFtcBgBIAEo",
            "AxIMCgREYXRhGAIgASgMIiUKDU1vdXNlUG9zaXRpb24SCQoBeBgBIAEoBRIJ",
            "CgF5GAIgASgFKi0KCExPR19UWVBFEgkKBURlYnVnEAASCwoHV2FybmluZxAB",
            "EgkKBUVycm9yEAIqYwoMTW91c2VCdXR0b25zEggKBE5vbmUQABIKCgRMZWZ0",
            "EICAQBIMCgVSaWdodBCAgIABEg0KBk1pZGRsZRCAgIACEg8KCFhCdXR0b24x",
            "EICAgAQSDwoIWEJ1dHRvbjIQgICACDLZAgoNUmVtb3RlU2VydmljZRIxCgdF",
            "eGVjQ21kEhIucmVtb3RlLkNtZFJlcXVlc3QaEC5yZW1vdGUuTG9nUmVwbHki",
            "ABI7Cg1DYXB0dXJlU2NyZWVuEhUucmVtb3RlLkNhcHR1cmVQYXJhbXMaES5y",
            "ZW1vdGUuSW1hZ2VEYXRhIgASNgoKTW91c2VDbGljaxIZLnJlbW90ZS5Nb3Vz",
            "ZUNsaWNrUmVxdWVzdBoLLnJlbW90ZS5Mb2ciABIuCgZLZXlUYXASFS5yZW1v",
            "dGUuS2V5VGFwUmVxdWVzdBoLLnJlbW90ZS5Mb2ciABI2CgpLZXlMaXN0VGFw",
            "EhkucmVtb3RlLktleUxpc3RUYXBSZXF1ZXN0GgsucmVtb3RlLkxvZyIAEjgK",
            "EEdldE1vdXNlUG9zaXRpb24SCy5yZW1vdGUuTmlsGhUucmVtb3RlLk1vdXNl",
            "UG9zaXRpb24iAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Remote.LOG_TYPE), typeof(global::Remote.MouseButtons), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.Log), global::Remote.Log.Parser, new[]{ "LogType", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.Nil), global::Remote.Nil.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.CaptureParams), global::Remote.CaptureParams.Parser, new[]{ "FullScreen", "X", "Y", "W", "H", "Quality" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.CmdRequest), global::Remote.CmdRequest.Parser, new[]{ "Cmd", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.MouseClickRequest), global::Remote.MouseClickRequest.Parser, new[]{ "X", "Y", "DoubleClick", "Button" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.MouseMoveRequest), global::Remote.MouseMoveRequest.Parser, new[]{ "X", "Y", "Low", "High" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.KeyTapRequest), global::Remote.KeyTapRequest.Parser, new[]{ "KeyCode", "Delay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.KeyListTapRequest), global::Remote.KeyListTapRequest.Parser, new[]{ "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.LogReply), global::Remote.LogReply.Parser, new[]{ "Logs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.ImageData), global::Remote.ImageData.Parser, new[]{ "TimeStamp", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remote.MousePosition), global::Remote.MousePosition.Parser, new[]{ "X", "Y" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LOG_TYPE {
    [pbr::OriginalName("Debug")] Debug = 0,
    [pbr::OriginalName("Warning")] Warning = 1,
    [pbr::OriginalName("Error")] Error = 2,
  }

  public enum MouseButtons {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Left")] Left = 1048576,
    [pbr::OriginalName("Right")] Right = 2097152,
    [pbr::OriginalName("Middle")] Middle = 4194304,
    [pbr::OriginalName("XButton1")] Xbutton1 = 8388608,
    [pbr::OriginalName("XButton2")] Xbutton2 = 16777216,
  }

  #endregion

  #region Messages
  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      logType_ = other.logType_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "LogType" field.</summary>
    public const int LogTypeFieldNumber = 1;
    private global::Remote.LOG_TYPE logType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Remote.LOG_TYPE LogType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogType != other.LogType) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogType != 0) hash ^= LogType.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LogType);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogType);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.LogType != 0) {
        LogType = other.LogType;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            logType_ = (global::Remote.LOG_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Nil : pb::IMessage<Nil> {
    private static readonly pb::MessageParser<Nil> _parser = new pb::MessageParser<Nil>(() => new Nil());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Nil> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nil() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nil(Nil other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nil Clone() {
      return new Nil(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Nil);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Nil other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Nil other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CaptureParams : pb::IMessage<CaptureParams> {
    private static readonly pb::MessageParser<CaptureParams> _parser = new pb::MessageParser<CaptureParams>(() => new CaptureParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaptureParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureParams(CaptureParams other) : this() {
      fullScreen_ = other.fullScreen_;
      x_ = other.x_;
      y_ = other.y_;
      w_ = other.w_;
      h_ = other.h_;
      quality_ = other.quality_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureParams Clone() {
      return new CaptureParams(this);
    }

    /// <summary>Field number for the "FullScreen" field.</summary>
    public const int FullScreenFieldNumber = 1;
    private bool fullScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FullScreen {
      get { return fullScreen_; }
      set {
        fullScreen_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private int w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 5;
    private int h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "Quality" field.</summary>
    public const int QualityFieldNumber = 6;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaptureParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaptureParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FullScreen != other.FullScreen) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (W != other.W) return false;
      if (H != other.H) return false;
      if (Quality != other.Quality) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FullScreen != false) hash ^= FullScreen.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (W != 0) hash ^= W.GetHashCode();
      if (H != 0) hash ^= H.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FullScreen != false) {
        output.WriteRawTag(8);
        output.WriteBool(FullScreen);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (W != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(W);
      }
      if (H != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(H);
      }
      if (Quality != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Quality);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FullScreen != false) {
        size += 1 + 1;
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      if (H != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(H);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaptureParams other) {
      if (other == null) {
        return;
      }
      if (other.FullScreen != false) {
        FullScreen = other.FullScreen;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.W != 0) {
        W = other.W;
      }
      if (other.H != 0) {
        H = other.H;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FullScreen = input.ReadBool();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            W = input.ReadInt32();
            break;
          }
          case 40: {
            H = input.ReadInt32();
            break;
          }
          case 48: {
            Quality = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Request
  /// </summary>
  public sealed partial class CmdRequest : pb::IMessage<CmdRequest> {
    private static readonly pb::MessageParser<CmdRequest> _parser = new pb::MessageParser<CmdRequest>(() => new CmdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdRequest(CmdRequest other) : this() {
      cmd_ = other.cmd_;
      args_ = other.args_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdRequest Clone() {
      return new CmdRequest(this);
    }

    /// <summary>Field number for the "Cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private string cmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Args" field.</summary>
    public const int ArgsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CmdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CmdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if(!args_.Equals(other.args_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      hash ^= args_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cmd);
      }
      args_.WriteTo(output, _repeated_args_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CmdRequest other) {
      if (other == null) {
        return;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      args_.Add(other.args_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cmd = input.ReadString();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MouseClickRequest : pb::IMessage<MouseClickRequest> {
    private static readonly pb::MessageParser<MouseClickRequest> _parser = new pb::MessageParser<MouseClickRequest>(() => new MouseClickRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MouseClickRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MouseClickRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MouseClickRequest(MouseClickRequest other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      doubleClick_ = other.doubleClick_;
      button_ = other.button_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MouseClickRequest Clone() {
      return new MouseClickRequest(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "DoubleClick" field.</summary>
    public const int DoubleClickFieldNumber = 3;
    private bool doubleClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoubleClick {
      get { return doubleClick_; }
      set {
        doubleClick_ = value;
      }
    }

    /// <summary>Field number for the "Button" field.</summary>
    public const int ButtonFieldNumber = 4;
    private global::Remote.MouseButtons button_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Remote.MouseButtons Button {
      get { return button_; }
      set {
        button_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MouseClickRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MouseClickRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (DoubleClick != other.DoubleClick) return false;
      if (Button != other.Button) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (DoubleClick != false) hash ^= DoubleClick.GetHashCode();
      if (Button != 0) hash ^= Button.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (DoubleClick != false) {
        output.WriteRawTag(24);
        output.WriteBool(DoubleClick);
      }
      if (Button != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Button);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (DoubleClick != false) {
        size += 1 + 1;
      }
      if (Button != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Button);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MouseClickRequest other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.DoubleClick != false) {
        DoubleClick = other.DoubleClick;
      }
      if (other.Button != 0) {
        Button = other.Button;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            DoubleClick = input.ReadBool();
            break;
          }
          case 32: {
            button_ = (global::Remote.MouseButtons) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MouseMoveRequest : pb::IMessage<MouseMoveRequest> {
    private static readonly pb::MessageParser<MouseMoveRequest> _parser = new pb::MessageParser<MouseMoveRequest>(() => new MouseMoveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MouseMoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MouseMoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MouseMoveRequest(MouseMoveRequest other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      low_ = other.low_;
      high_ = other.high_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MouseMoveRequest Clone() {
      return new MouseMoveRequest(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Low" field.</summary>
    public const int LowFieldNumber = 3;
    private float low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "High" field.</summary>
    public const int HighFieldNumber = 4;
    private float high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MouseMoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MouseMoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Low != other.Low) return false;
      if (High != other.High) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Low != 0F) hash ^= Low.GetHashCode();
      if (High != 0F) hash ^= High.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Low != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Low);
      }
      if (High != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(High);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Low != 0F) {
        size += 1 + 4;
      }
      if (High != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MouseMoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Low != 0F) {
        Low = other.Low;
      }
      if (other.High != 0F) {
        High = other.High;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 29: {
            Low = input.ReadFloat();
            break;
          }
          case 37: {
            High = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyTapRequest : pb::IMessage<KeyTapRequest> {
    private static readonly pb::MessageParser<KeyTapRequest> _parser = new pb::MessageParser<KeyTapRequest>(() => new KeyTapRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyTapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTapRequest(KeyTapRequest other) : this() {
      keyCode_ = other.keyCode_.Clone();
      delay_ = other.delay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTapRequest Clone() {
      return new KeyTapRequest(this);
    }

    /// <summary>Field number for the "KeyCode" field.</summary>
    public const int KeyCodeFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_keyCode_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> keyCode_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KeyCode {
      get { return keyCode_; }
    }

    /// <summary>Field number for the "Delay" field.</summary>
    public const int DelayFieldNumber = 2;
    private float delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyTapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyTapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keyCode_.Equals(other.keyCode_)) return false;
      if (Delay != other.Delay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keyCode_.GetHashCode();
      if (Delay != 0F) hash ^= Delay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keyCode_.WriteTo(output, _repeated_keyCode_codec);
      if (Delay != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Delay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keyCode_.CalculateSize(_repeated_keyCode_codec);
      if (Delay != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyTapRequest other) {
      if (other == null) {
        return;
      }
      keyCode_.Add(other.keyCode_);
      if (other.Delay != 0F) {
        Delay = other.Delay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keyCode_.AddEntriesFrom(input, _repeated_keyCode_codec);
            break;
          }
          case 21: {
            Delay = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyListTapRequest : pb::IMessage<KeyListTapRequest> {
    private static readonly pb::MessageParser<KeyListTapRequest> _parser = new pb::MessageParser<KeyListTapRequest>(() => new KeyListTapRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyListTapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListTapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListTapRequest(KeyListTapRequest other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListTapRequest Clone() {
      return new KeyListTapRequest(this);
    }

    /// <summary>Field number for the "Keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Remote.KeyTapRequest> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Remote.KeyTapRequest.Parser);
    private readonly pbc::RepeatedField<global::Remote.KeyTapRequest> keys_ = new pbc::RepeatedField<global::Remote.KeyTapRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Remote.KeyTapRequest> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyListTapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyListTapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyListTapRequest other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Reply
  /// </summary>
  public sealed partial class LogReply : pb::IMessage<LogReply> {
    private static readonly pb::MessageParser<LogReply> _parser = new pb::MessageParser<LogReply>(() => new LogReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogReply(LogReply other) : this() {
      logs_ = other.logs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogReply Clone() {
      return new LogReply(this);
    }

    /// <summary>Field number for the "Logs" field.</summary>
    public const int LogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Remote.Log> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(10, global::Remote.Log.Parser);
    private readonly pbc::RepeatedField<global::Remote.Log> logs_ = new pbc::RepeatedField<global::Remote.Log>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Remote.Log> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logs_.Equals(other.logs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logs_.WriteTo(output, _repeated_logs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logs_.CalculateSize(_repeated_logs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogReply other) {
      if (other == null) {
        return;
      }
      logs_.Add(other.logs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImageData : pb::IMessage<ImageData> {
    private static readonly pb::MessageParser<ImageData> _parser = new pb::MessageParser<ImageData>(() => new ImageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageData(ImageData other) : this() {
      timeStamp_ = other.timeStamp_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageData Clone() {
      return new ImageData(this);
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 1;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp != other.TimeStamp) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeStamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimeStamp);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageData other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MousePosition : pb::IMessage<MousePosition> {
    private static readonly pb::MessageParser<MousePosition> _parser = new pb::MessageParser<MousePosition>(() => new MousePosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MousePosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remote.TestsuiteRemoteReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MousePosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MousePosition(MousePosition other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MousePosition Clone() {
      return new MousePosition(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MousePosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MousePosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MousePosition other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
