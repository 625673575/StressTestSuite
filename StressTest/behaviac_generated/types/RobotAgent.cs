// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections.Generic;
using behaviac;
using StressTest;
///<<< BEGIN WRITING YOUR CODE FILE_INIT

///<<< END WRITING YOUR CODE

public class RobotAgent : behaviac.Agent
///<<< BEGIN WRITING YOUR CODE RobotAgent
///<<< END WRITING YOUR CODE
{
    public RobotAgent(string name)
    {
        if (string.IsNullOrEmpty(name) || AgentInstances.ContainsKey(name))
        {
            throw new Exception("不正确的Agent名称");
        }
        Username = name;
        AgentInstances.Add(name, this);
    }
    #region static property
    static Random rand = new Random();

    public static Dictionary<string, RobotAgent> AgentInstances = new Dictionary<string, RobotAgent>();

    public static uint AgentCount = 0;
    public static uint PassTestCount = 0;
    public static bool IsShowLogMessage = true;

    public static bool ForceLogout = false;
    public static void InitData()
    {

    }
    #endregion
    #region static method

    public static uint GetProcessID()
    {
        return StressTest.MainWindow.ProcessID;
    }

    public static int GetRandomInt(int min, int max)
    {
        return rand.Next(min, max);
    }

    public static long GetRandomLong(long min, long max)
    {
        return rand.Next((int)min, (int)max);
    }

    public static string Format1(string format, long l0)
    {
        string ret = string.Format(format, l0);
        return ret;
    }

    public static string Format2(string format, long l0, long l1)
    {
        return string.Format(format, l0, l1);
    }

    public static bool IsAgentLogined(string agentName)
    {
        return AgentInstances.ContainsKey(agentName);
    }

    public static uint GetLoginedUserCount()
    {
        uint count = 0;
        foreach (RobotAgent age in AgentInstances.Values)
        {
            if (age._net != null && age.IsLogin)
            {
                ++count;
            }
        }
        return count;
    }
    public static RobotAgent GetAgent(string agentName)
    {
        RobotAgent ret;
        if (AgentInstances.TryGetValue(agentName, out ret))
            return ret;
        else
            throw new Exception("不存在该Agent实例");
    }

    public static ulong GetAgentPlayerID(string task, int index)
    {
        RobotAgent agent;
        if (AgentInstances.TryGetValue(task, out agent))
            return agent.Player.ID;
        return 0;
    }

    public static bool RemoveAgent(string agentName)
    {
        AgentInstances[agentName].Logout();
        return AgentInstances.Remove(agentName);
    }
    public static void ClearAgent()
    {
        AgentInstances.Clear();
    }
    public static uint GetNetAgentCount()
    {
        uint count = 0;
        foreach (RobotAgent age in AgentInstances.Values)
        {
            if (age._net != null && age.IsTryLogin)
            {
                ++count;
            }
        }
        return count;
    }
    #endregion
    #region instance properry
    public long TempLong1 = 0;

    public long TempLong2 = 0;

    public string TempString1 = "";

    public string TempString2 = "";


    public uint Frame;
    //Player _player;
    public EBTStatus _status = behaviac.EBTStatus.BT_RUNNING;
    //public Player Player { get { return _player; } }

    ////Account _account;
    public Account Account { get { return _account; } }

    //NetManager _net;
    //public NetManager Net { get { return _net; } }

    public bool IsLogin = false;
    public bool IsTryLogin = false;
    public uint LoginTimes = 0;
    [ShowValue("密码:{0}")]
    public string Password = "123456";

    public event Action<string> OnAgentLogCallback;
    /// <summary>
    /// Username为账户名，也就是Agent的名字
    /// </summary>
    [ShowValue("用户名:{0}")]
    public string Username { get { return GetName(); } set { SetName(value); } }

    [ShowValue("用户ID:{0}")]
    public ulong UserID { get { return Player.ID; } }
    #endregion
    #region instance method
    public void Register(Player player)
    {
        _player = player;
    }
    public void Register(Account account)
    {
        _account = account;
    }
    public void Register(NetManager net)
    {
        _net = net;
    }
    public int GetIndex()
    {
        int la = Username.LastIndexOf('_') + 1;
        string par = Username.Substring(la);
        return int.Parse(par);
    }


    public static string GetGUIDString()
    {
        return Guid.NewGuid().ToString();
    }
    [Operation("用户登录", new string[] { })]
    public void Login()
    {
        if (IsLogin)
            return;
        Int32 serverID = 5;
        string loginContent = string.Format("?userName={0}&serverId={1}&isAdult=1", Username, serverID);

        _net = new NetManager();
        _net.Init(serverID);
        _net.LoginToBase(loginContent);
        IsTryLogin = true;
    }

    [Operation("用户登出", new string[] { })]
    public void Logout()
    {
        if (_net != null)
            _net.Destroy();
        IsLogin = false;
    }
    [Operation("输出日志", new string[] { "Hello Tensorflow!" }, "Hello World!")]
    public void AgentLog(string message)
    {
        OnAgentLogCallback?.Invoke(message);
    }
    [Operation("修改金币数量", new string[] { "金币数量:" })]
    public void ModJinBi(int count)
    {
        if (Player != null)
            Player.ModJinBi(count);
    }
    [Operation("修改钻石数量", new string[] { "钻石数量:" })]
    public void ModZuanShi(int count)
    {
        if (Player != null)
            Player.ModZuanShi(count);
    }
    [Operation("修改点券数量", new string[] { "点券数量:" })]
    public void ModDianQuan(int count)
    {
        if (Player != null)
            Player.ModDianQuan(count);
    }
    [Operation("添加朋友", new string[] { "玩家名称:" })]
    public void AddFriend(string name)
    {
        if (Player != null)
            Player.AddFriend(name);
    }
    [Operation("删除朋友", new string[] { "玩家名称:" })]
    public void DelFriend(string name)
    {
        if (Player != null)
            Player.DelFriend(name);
    }
    [Operation("设置朋友备注", new string[] { "玩家ID:", "玩家备注" })]
    public void SetFriendNote(ulong id, string note)
    {
        if (Player != null)
            Player.SetFriendNote(id, note);
    }
    [Operation("添加黑名单", new string[] { "玩家名称:" })]
    public void AddBlackFriend(string name)
    {
        if (Player != null)
            Player.AddBlackFriend(name);
    }
    [Operation("删除黑名单", new string[] { "玩家名称:" })]
    public void DelBlackFriend(string name)
    {
        if (Player != null)
            Player.DelBlackFriend(name);
    }
    [Operation("购买装备", new string[] { "物品ID:", "支付方式:", "物品数量:" })]
    public void BuyItem(uint template, sbyte type, short count)
    {
        if (Player != null)
            Player.BuyItem(template, type, count);

    }
    [Operation("卖出装备", new string[] { "物品ID:", "物品数量:" })]
    public void SellItem(uint template, short count)
    {
        if (Player != null)
            Player.SellItem(template, count);
    }
    [Operation("购买VIP", new string[] { "VIP时间:" })]
    public void BuyVIPDuration(short count)
    {
        if (Player != null)
            Player.BuyVIPDuration(count);
    }
    [Operation("穿上皮肤", new string[] { "皮肤ID:", "IDX:" })]
    public void DressSkin(uint template, sbyte idx)
    {
        if (Player != null)
            Player.DressSkin(template, idx);
    }
    [Operation("发送消息", new string[] { "玩家ID:", "消息内容:" })]
    public void ChatTo(string name, string content)
    {
        if (Player != null)
            Player.ChatTo(name, content);
    }
    [Operation("发送邮件", new string[] { "玩家名称:", "邮件标题:", "邮件内容:" })]
    public void SendMail(string target, string title, string content)
    {
        if (Player != null)
            Player.SendMail(target, title, content, 0);
    }
    [Operation("添加成就", new string[] { "成就ID:" })]
    public void AddGoal(uint id)
    {
        if (Player != null)
            Player.AddGoal(id);
    }
    [Operation("删除成就", new string[] { "成就ID:" })]
    public void DelGoal(uint id)
    {
        if (Player != null)
            Player.DelGoal(id);
    }
    [Operation("获取登录奖励", new string[] { })]
    public void TakeLoginReward()
    {
        if (Player != null)
        {
            Player.TakeLoginReward();
        }
    }
    [Operation("是否拥有这个英雄", new string[] { "英雄ID" })]
    public bool HasHero(uint id)
    {
        if (Player == null) return false;
        else
        {
            return Player.HasHero(id);
        }
    }
    [Operation("是否拥有这个物品", new string[] { "物品ID" })]
    public bool HasItem(uint id)
    {
        if (Player == null) return false;
        else
        {
            return Player.HasItem(id);
        }
    }
    [Operation("是否拥有这个皮肤", new string[] { "皮肤ID" })]
    public bool HasSkin(uint id)
    {
        if (Player == null) return false;
        else
        {
            return Player.HasSkin(id);
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////
    [ShowValue("金币数:{0}")]
    public long GetJinBi()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.JinBi.Value;
        }
    }
    [ShowValue("钻石数:{0}")]
    public long GetZuanShi()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.ZuanShi.Value;
        }
    }

    [ShowValue("点券数:{0}")]
    public long GetDianQuan()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.DianQuan.Value;
        }
    }

    [ShowValue("登录次数{0}")]
    public long GetLoginCount()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.LoginCount.Value;
        }
    }

    [ShowValue("玩家名称:{0}")]
    public string GetNameAlias()
    {
        if (Player == null) return "";
        else
        {
            return Player.Property.NameAlias.Value;
        }
    }
    [ShowValue("VIP等级:{0}")]
    public short GetVIPLevel()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.VIPLevel.Value;
        }
    }

    [ShowValue("VIP 结束时间:{0}")]
    public long GetVIPEndTime()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.VIPEndTime.Value;
        }
    }
    [ShowValue("累积登录天数:{0}")]
    public short GetAccumulateLoginDayCount()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.AccumulateLoginDayCount.Value;
        }
    }
    public long GetAccumulateOnlineDuration()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.AccumulateOnlineDuration.Value;
        }
    }
    public long GetLastOnlineTime1970()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.LastOnlineTime1970.Value;
        }
    }
    [ShowValue("总计在线时间:{0}")]
    public string GetOnlineDuration()
    {
        long t = GetAccumulateOnlineDuration() * 1000;
        if (t < 0)
            return string.Empty;
        TimeSpan span = new TimeSpan(t);
        return string.Format("{0}天{1}时{2}分{3}秒", span.Days, span.Hours, span.Minutes, span.Seconds);
    }
    [ShowValue("上次登录时间:{0}")]
    public string GetLastOnlineTime()
    {
        long t = GetLastOnlineTime1970();
        if (t < 0)
            return string.Empty;
        DateTime lastLoginDateTime = ViTickCount.GetTime(t);
        return lastLoginDateTime.ToString();
    }
    [ShowValue("玩家等级:{0}")]
    public short GetLevel()
    {
        if (Player == null) return -1;
        else
        {
            return Player.Property.Level.Value;
        }
    }
    [ShowValue("英雄列表{0}")]
    public ShowValuePairStruct GetHeroList()
    {
        ShowValuePairStruct ret = new ShowValuePairStruct();
        foreach (var x in Player.Property.HeroList.Array)
        {
            var property = x.Value.Property;
            ret.Add("英雄ID:{0}", x.Key);
            ret.Add("熟练度:{0}", property.Proficient.Value);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine();
            sb.AppendLine("[");
            for (int i = 0; i < property.SkinList.GetLength(); ++i)
            {
                sb.AppendFormat("{0}:   状态:{1}   结束时间{2}", i, (SkinState)property.SkinList[i].State.Value, property.SkinList[i].EndTime.Value);
                sb.AppendLine();
            }
            sb.Append("]");
            ret.Add("皮肤状态:{0}", sb.ToString());

        }
        return ret;
    }
    [ShowValue("物品列表{0}")]
    public ShowValuePairStruct GetItemList()
    {
        ShowValuePairStruct ret = new ShowValuePairStruct();
        foreach (var x in Player.Property.ItemList.Array)
        {
            var property = x.Property;
            ret.Add("商品ID:{0}", property.Template.Value);
            ret.Add("物品ID:{0}", property.ID.Value);
            ret.Add("物品数量:{0}", property.StackCount.Value);
        }
        return ret;
    }

    [Operation("获取商城中出售的英雄ID", new string[] { })]
    public static List<int> GetMarketHeroID()
    {
        List<int> ret = new List<int>();
        List<ItemMarketStruct> items = ViSealedDB<ItemMarketStruct>.Array;
        foreach (var item in items)
        {
            if (item.Item.Item.Data.Type.Value == (int)ItemType.HERO)
            {
                ret.Add(item.ID);
            }
        }
        return ret;
    }
    public static ItemMarketStruct[] GetMarketHero()
    {
        List<ItemMarketStruct> ret = new List<ItemMarketStruct>();
        List<ItemMarketStruct> items = ViSealedDB<ItemMarketStruct>.Array;
        foreach (var item in items)
        {
            if (item.Item.Item.Data.Type.Value == (int)ItemType.HERO)
            {
                ret.Add(item);
            }
        }
        return ret.ToArray();
    }
    [Operation("获取商城中出售的皮肤ID", new string[] { "英雄ID" }, 10030)]
    public static List<int> GetMarketHeroSkinID(int HeroID)
    {
        List<int> ret = new List<int>();
        int prefix = HeroID / 10;
        List<ItemMarketStruct> items = ViSealedDB<ItemMarketStruct>.Array;
        foreach (var item in items)
        {
            if (prefix == item.ID / 10 && item.Item.Item.Data.Type.Value == (int)ItemType.SKIN)
            {
                ret.Add(item.ID);
            }
        }
        return ret;
    }
    public static ItemMarketStruct[] GetMarketHeroSkin(int HeroID)
    {
        List<ItemMarketStruct> ret = new List<ItemMarketStruct>();
        int prefix = HeroID / 10;
        List<ItemMarketStruct> items = ViSealedDB<ItemMarketStruct>.Array;
        foreach (var item in items)
        {
            if (prefix == item.ID / 10 && item.Item.Item.Data.Type.Value == (int)ItemType.SKIN)
            {
                ret.Add(item);
            }
        }
        return ret.ToArray();
    }
    [Operation("尝试购买一个新英雄", new string[] { "支付类型" }, 1)]
    public bool TryBuyAHero(sbyte payType)
    {
        var heroItems = GetMarketHero();
        foreach (ItemMarketStruct heroItem in heroItems)
        {
            if (HasHero((uint)heroItem.Item.Item.Data.ID))
                continue;

            BuyItem((uint)heroItem.ID, payType, 1);
            return true;
        }
        return false;
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="payType">0:点券 1:金币 2:钻石</param>
    /// <returns></returns>
    [Operation("尝试购买一个新英雄皮肤", new string[] { "支付类型" }, 1)]
    public bool TryBuyAHeroSkin(sbyte payType)
    {
        var heroItems = GetMarketHero();
        foreach (ItemMarketStruct heroItem in heroItems)
        {
            int heroID = heroItem.Item.Item.Data.ID;
            if (!HasHero((uint)heroID))
                continue;

            var skins = GetMarketHeroSkin(heroID);
            foreach (var skin in skins)
            {
                uint skinID = (uint)skin.Item.Item.Data.ID;
                if (HasSkin(skinID))
                    continue;
                BuyItem(skinID, payType, 1);
                return true;
            }
        }
        return false;
    }

    #endregion
}
